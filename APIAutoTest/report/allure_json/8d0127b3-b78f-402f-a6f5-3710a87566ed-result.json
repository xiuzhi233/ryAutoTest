{"name": "验证【用户管理】添加用户，nickName为空，其他数据正常，添加失败", "status": "failed", "statusDetails": {"message": "AssertionError: 断言失败", "trace": "self = <APIAutoTest.test_case.test_ryvue.TestRyvue object at 0x0000023F8337FAD0>\ndb_fixture = <APIAutoTest.common.db.DB object at 0x0000023F82DC9F70>\nrequest_fixture = <APIAutoTest.request_method.RequestMethod.RequestMethod object at 0x0000023F8313CDD0>\ncase_number = 'userManagement_084', module_name = '系统管理', api_name = '用户管理'\ncase_title = '验证【用户管理】添加用户，nickName为空，其他数据正常，添加失败', request_url = 'http://47.113.217.131:88/prod-api/system/user'\ncase_level = '中', request_method = 'POST', request_mime = 'application/json'\nrequest_data = {'nickName': '', 'password': '123456', 'postIds': [], 'roleIds': [], ...}\nrequest_expect = {'code': 500, 'msg': '操作失败'}, sql_type = 'DELETE'\nsql_sentence = \"DELETE FROM sys_user WHERE user_name = 'userManagement_084';\", update_key = None\n\n    @allure.epic(\"若依接口自动化测试\")\n    @log_decorator\n    @pytest.mark.parametrize(\n        \"case_number, module_name, api_name, case_title, case_level, request_url, request_method, request_mime, \"\n        \"request_data, request_expect, sql_type, sql_sentence, update_key\",\n        ReadExcel().get_data())\n    def test_ryvue(self, db_fixture, request_fixture, case_number, module_name, api_name, case_title, request_url,\n                   case_level, request_method, request_mime, request_data, request_expect, sql_type, sql_sentence,\n                   update_key):\n        # 调用allure功能，影响报告的显示\n        # @allure.feature(\"模块名称\")\n        allure.dynamic.feature(module_name)\n        # @allure.story(\"接口名称\")\n        allure.dynamic.story(api_name)\n        # @allure.title(\"用例标题\")\n        allure.dynamic.title(case_title)\n        # @allure.severity(\"用例等级\")\n        allure.dynamic.severity(case_level)\n        # 判断sql语句类型是否为DELETE\n        if sql_type == \"DELETE\":\n            # 使用DB类对象来执行删除的语句\n            db_fixture.delete(sql_sentence)\n    \n        elif sql_type == \"SELECT\":\n            # 使用DB类对象来执行查询的语句，接收查询的结果\n            select_result = db_fixture.select(sql_sentence)\n            # 将查询结果更新到用例数据中\n            request_data[update_key] = select_result\n            # 更新之后的用例数据发送给服务器\n    \n        elif sql_type == \"SELECT|DELETE\" or sql_type == \"DELETE|SELECT\":\n            # 使用DB类对象，调用delete方法执行删除语句；使用DB类对象来执行查询的语句，接收查询的结果\n            db_fixture.delete(sql_sentence.get(\"DELETE\"))\n            select_result = db_fixture.delete(sql_sentence.get(\"SELECT\"))\n            request_data[update_key] = select_result\n    \n        # 使用RequestMethod对象发送请求\n        response = request_fixture.request_all(req_method=request_method, req_url=request_url, req_mime=request_mime,\n                                               case_data=request_data)\n        try:\n            allure.dynamic.description(f\"actual_data:{response.json()}\")\n        except:\n            allure.dynamic.description(f\"status_code:{response.status_code}\")\n        # 断言\n        try:\n            # 获取期望数据的key，期望数据的key对应的值是否和服务器返回的数据key对应的值相等，如果相等断言成功，否则失败\n            # assert response.json().get('msg') == request_expect['msg']\n            # and response.json().get('code') == request_expect['code']\n    \n            for key in request_expect.keys():\n                if key == \"status_code\":\n                    assert response.status_code == request_expect[\"status_code\"]\n                else:\n>                   assert response.json().get(key) == request_expect[key]\nE                   AssertionError: assert '\\n### Error ...default value' == '操作失败'\nE                     \nE                     - 操作失败\nE                     + \nE                     + ### Error updating database.  Cause: java.sql.SQLException: Field 'nick_name' doesn't have a default value\nE                     + ### The error may exist in URL [jar:file:/ruoyi/app/ruoyi-admin.jar!/BOOT-INF/lib/ruoyi-system-3.8.7.jar!/mapper/system/SysUserMapper.xml]\nE                     + ### The error may involve com.ruoyi.system.mapper.SysUserMapper.insertUser-Inline\nE                     + ### The error occurred while setting parameters...\nE                     \nE                     ...Full output truncated (3 lines hidden), use '-vv' to show\n\ntest_case\\test_ryvue.py:73: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <APIAutoTest.test_case.test_ryvue.TestRyvue object at 0x0000023F8337FAD0>\ndb_fixture = <APIAutoTest.common.db.DB object at 0x0000023F82DC9F70>\nrequest_fixture = <APIAutoTest.request_method.RequestMethod.RequestMethod object at 0x0000023F8313CDD0>\ncase_number = 'userManagement_084', module_name = '系统管理', api_name = '用户管理'\ncase_title = '验证【用户管理】添加用户，nickName为空，其他数据正常，添加失败', request_url = 'http://47.113.217.131:88/prod-api/system/user'\ncase_level = '中', request_method = 'POST', request_mime = 'application/json'\nrequest_data = {'nickName': '', 'password': '123456', 'postIds': [], 'roleIds': [], ...}\nrequest_expect = {'code': 500, 'msg': '操作失败'}, sql_type = 'DELETE'\nsql_sentence = \"DELETE FROM sys_user WHERE user_name = 'userManagement_084';\", update_key = None\n\n    @allure.epic(\"若依接口自动化测试\")\n    @log_decorator\n    @pytest.mark.parametrize(\n        \"case_number, module_name, api_name, case_title, case_level, request_url, request_method, request_mime, \"\n        \"request_data, request_expect, sql_type, sql_sentence, update_key\",\n        ReadExcel().get_data())\n    def test_ryvue(self, db_fixture, request_fixture, case_number, module_name, api_name, case_title, request_url,\n                   case_level, request_method, request_mime, request_data, request_expect, sql_type, sql_sentence,\n                   update_key):\n        # 调用allure功能，影响报告的显示\n        # @allure.feature(\"模块名称\")\n        allure.dynamic.feature(module_name)\n        # @allure.story(\"接口名称\")\n        allure.dynamic.story(api_name)\n        # @allure.title(\"用例标题\")\n        allure.dynamic.title(case_title)\n        # @allure.severity(\"用例等级\")\n        allure.dynamic.severity(case_level)\n        # 判断sql语句类型是否为DELETE\n        if sql_type == \"DELETE\":\n            # 使用DB类对象来执行删除的语句\n            db_fixture.delete(sql_sentence)\n    \n        elif sql_type == \"SELECT\":\n            # 使用DB类对象来执行查询的语句，接收查询的结果\n            select_result = db_fixture.select(sql_sentence)\n            # 将查询结果更新到用例数据中\n            request_data[update_key] = select_result\n            # 更新之后的用例数据发送给服务器\n    \n        elif sql_type == \"SELECT|DELETE\" or sql_type == \"DELETE|SELECT\":\n            # 使用DB类对象，调用delete方法执行删除语句；使用DB类对象来执行查询的语句，接收查询的结果\n            db_fixture.delete(sql_sentence.get(\"DELETE\"))\n            select_result = db_fixture.delete(sql_sentence.get(\"SELECT\"))\n            request_data[update_key] = select_result\n    \n        # 使用RequestMethod对象发送请求\n        response = request_fixture.request_all(req_method=request_method, req_url=request_url, req_mime=request_mime,\n                                               case_data=request_data)\n        try:\n            allure.dynamic.description(f\"actual_data:{response.json()}\")\n        except:\n            allure.dynamic.description(f\"status_code:{response.status_code}\")\n        # 断言\n        try:\n            # 获取期望数据的key，期望数据的key对应的值是否和服务器返回的数据key对应的值相等，如果相等断言成功，否则失败\n            # assert response.json().get('msg') == request_expect['msg']\n            # and response.json().get('code') == request_expect['code']\n    \n            for key in request_expect.keys():\n                if key == \"status_code\":\n                    assert response.status_code == request_expect[\"status_code\"]\n                else:\n                    assert response.json().get(key) == request_expect[key]\n    \n        except AssertionError:\n            logging.error(case_number + \"断言失败，用例数据为：\" + str(request_data) + \"期望数据为：\" + str(\n                request_expect) + \"服务器返回的期望数据：\" + response.text)\n>           raise AssertionError(\"断言失败\")\nE           AssertionError: 断言失败\n\ntest_case\\test_ryvue.py:78: AssertionError"}, "description": "actual_data:{'msg': \"\\n### Error updating database.  Cause: java.sql.SQLException: Field 'nick_name' doesn't have a default value\\n### The error may exist in URL [jar:file:/ruoyi/app/ruoyi-admin.jar!/BOOT-INF/lib/ruoyi-system-3.8.7.jar!/mapper/system/SysUserMapper.xml]\\n### The error may involve com.ruoyi.system.mapper.SysUserMapper.insertUser-Inline\\n### The error occurred while setting parameters\\n### SQL: insert into sys_user(                  user_name,                                     password,       status,       create_by,            create_time    )values(                  ?,                                     ?,       ?,       ?,            sysdate()    )\\n### Cause: java.sql.SQLException: Field 'nick_name' doesn't have a default value\\n; Field 'nick_name' doesn't have a default value; nested exception is java.sql.SQLException: Field 'nick_name' doesn't have a default value\", 'code': 500}", "attachments": [{"name": "log", "source": "afa80876-817c-42df-9c5e-890c2efadc90-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case_number", "value": "'userManagement_084'"}, {"name": "module_name", "value": "'系统管理'"}, {"name": "api_name", "value": "'用户管理'"}, {"name": "case_title", "value": "'验证【用户管理】添加用户，nickName为空，其他数据正常，添加失败'"}, {"name": "case_level", "value": "'中'"}, {"name": "request_url", "value": "'http://47.113.217.131:88/prod-api/system/user'"}, {"name": "request_method", "value": "'POST'"}, {"name": "request_mime", "value": "'application/json'"}, {"name": "request_data", "value": "{'userName': 'userManagement_084', 'nickName': '', 'password': '123456', 'status': '0', 'postIds': [], 'roleIds': []}"}, {"name": "request_expect", "value": "{'msg': '操作失败', 'code': 500}"}, {"name": "sql_type", "value": "'DELETE'"}, {"name": "sql_sentence", "value": "'DELETE FROM sys_user WHERE user_name = 'userManagement_084';'"}, {"name": "update_key", "value": "None"}], "start": 1712029702747, "stop": 1712029702944, "uuid": "961b51d8-0e69-4abb-a1ac-d58e3ae71149", "historyId": "512719cee05bcf1252c543400affd340", "testCaseId": "71cd9252926fc3e5d5ed6b518138477a", "fullName": "test_case.test_ryvue.TestRyvue#test_ryvue", "labels": [{"name": "feature", "value": "系统管理"}, {"name": "story", "value": "用户管理"}, {"name": "severity", "value": "中"}, {"name": "epic", "value": "若依接口自动化测试"}, {"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "test_ryvue"}, {"name": "subSuite", "value": "TestRyvue"}, {"name": "host", "value": "DESKTOP-P49BVBS"}, {"name": "thread", "value": "1936-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_ryvue"}]}