{"name": "验证【用户管理】修改用户，email特殊字符，其他数据正常，修改失败", "status": "failed", "statusDetails": {"message": "AssertionError: 断言失败", "trace": "self = <APIAutoTest.test_case.test_ryvue.TestRyvue object at 0x000001ACDB4565D0>, db_fixture = <APIAutoTest.common.db.DB object at 0x000001ACDAE698B0>\nrequest_fixture = <APIAutoTest.request_method.RequestMethod.RequestMethod object at 0x000001ACDB1A7E00>, case_number = 'userManagement_127', module_name = '系统管理'\napi_name = '用户管理', case_title = '验证【用户管理】修改用户，email特殊字符，其他数据正常，修改失败', request_url = 'http://192.168.109.134:81/prod-api/system/user', case_level = '中'\nrequest_method = 'PUT', request_mime = 'application/json', request_data = {'email': 'a#$%^&*@b.c', 'nickName': 'test', 'userId': 4, 'userName': 'test', ...}\nrequest_expect = {'code': 500, 'msg': '邮箱格式不正确'}, sql_type = 'SELECT', sql_sentence = \"SELECT user_id FROM sys_user WHERE user_name = 'test';\"\nupdate_key = 'user_id'\n\n    @allure.epic(\"若依接口自动化测试\")\n    @log_decorator\n    @pytest.mark.parametrize(\n        \"case_number, module_name, api_name, case_title, case_level, request_url, request_method, request_mime, \"\n        \"request_data, request_expect, sql_type, sql_sentence, update_key\",\n        ReadExcel().get_data())\n    def test_ryvue(self, db_fixture, request_fixture, case_number, module_name, api_name, case_title, request_url,\n                   case_level, request_method, request_mime, request_data, request_expect, sql_type, sql_sentence,\n                   update_key):\n        # 调用allure功能，影响报告的显示\n        # @allure.feature(\"模块名称\")\n        allure.dynamic.feature(module_name)\n        # @allure.story(\"接口名称\")\n        allure.dynamic.story(api_name)\n        # @allure.title(\"用例标题\")\n        allure.dynamic.title(case_title)\n        # @allure.severity(\"用例等级\")\n        allure.dynamic.severity(case_level)\n        # 判断sql语句类型是否为DELETE\n        if sql_type == \"DELETE\":\n            # 使用DB类对象来执行删除的语句\n            db_fixture.delete(sql_sentence)\n    \n        elif sql_type == \"SELECT\":\n            # 使用DB类对象来执行查询的语句，接收查询的结果\n            select_result = db_fixture.select(sql_sentence)\n            # 将查询结果更新到用例数据中\n            request_data[update_key] = select_result\n            # 更新之后的用例数据发送给服务器\n    \n        elif sql_type == \"SELECT|DELETE\" or sql_type == \"DELETE|SELECT\":\n            # 使用DB类对象，调用delete方法执行删除语句；使用DB类对象来执行查询的语句，接收查询的结果\n            db_fixture.delete(sql_sentence.get(\"DELETE\"))\n            select_result = db_fixture.delete(sql_sentence.get(\"SELECT\"))\n            request_data[update_key] = select_result\n    \n        # 使用RequestMethod对象发送请求\n        response = request_fixture.request_all(req_method=request_method, req_url=request_url, req_mime=request_mime,\n                                               case_data=request_data)\n        allure.dynamic.description(f\"actual_data:{response.json()}\")\n        # 断言\n        try:\n            # 获取期望数据的key，期望数据的key对应的值是否和服务器返回的数据key对应的值相等，如果相等断言成功，否则失败\n            # assert response.json().get('msg') == request_expect['msg']\n            # and response.json().get('code') == request_expect['code']\n    \n            for key in request_expect.keys():\n>               assert response.json().get(key) == request_expect[key]\nE               assert \"修改用户'test'失败，登录账号已存在\" == '邮箱格式不正确'\nE                 \nE                 - 邮箱格式不正确\nE                 + 修改用户'test'失败，登录账号已存在\n\ntest_case\\test_ryvue.py:67: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <APIAutoTest.test_case.test_ryvue.TestRyvue object at 0x000001ACDB4565D0>, db_fixture = <APIAutoTest.common.db.DB object at 0x000001ACDAE698B0>\nrequest_fixture = <APIAutoTest.request_method.RequestMethod.RequestMethod object at 0x000001ACDB1A7E00>, case_number = 'userManagement_127', module_name = '系统管理'\napi_name = '用户管理', case_title = '验证【用户管理】修改用户，email特殊字符，其他数据正常，修改失败', request_url = 'http://192.168.109.134:81/prod-api/system/user', case_level = '中'\nrequest_method = 'PUT', request_mime = 'application/json', request_data = {'email': 'a#$%^&*@b.c', 'nickName': 'test', 'userId': 4, 'userName': 'test', ...}\nrequest_expect = {'code': 500, 'msg': '邮箱格式不正确'}, sql_type = 'SELECT', sql_sentence = \"SELECT user_id FROM sys_user WHERE user_name = 'test';\"\nupdate_key = 'user_id'\n\n    @allure.epic(\"若依接口自动化测试\")\n    @log_decorator\n    @pytest.mark.parametrize(\n        \"case_number, module_name, api_name, case_title, case_level, request_url, request_method, request_mime, \"\n        \"request_data, request_expect, sql_type, sql_sentence, update_key\",\n        ReadExcel().get_data())\n    def test_ryvue(self, db_fixture, request_fixture, case_number, module_name, api_name, case_title, request_url,\n                   case_level, request_method, request_mime, request_data, request_expect, sql_type, sql_sentence,\n                   update_key):\n        # 调用allure功能，影响报告的显示\n        # @allure.feature(\"模块名称\")\n        allure.dynamic.feature(module_name)\n        # @allure.story(\"接口名称\")\n        allure.dynamic.story(api_name)\n        # @allure.title(\"用例标题\")\n        allure.dynamic.title(case_title)\n        # @allure.severity(\"用例等级\")\n        allure.dynamic.severity(case_level)\n        # 判断sql语句类型是否为DELETE\n        if sql_type == \"DELETE\":\n            # 使用DB类对象来执行删除的语句\n            db_fixture.delete(sql_sentence)\n    \n        elif sql_type == \"SELECT\":\n            # 使用DB类对象来执行查询的语句，接收查询的结果\n            select_result = db_fixture.select(sql_sentence)\n            # 将查询结果更新到用例数据中\n            request_data[update_key] = select_result\n            # 更新之后的用例数据发送给服务器\n    \n        elif sql_type == \"SELECT|DELETE\" or sql_type == \"DELETE|SELECT\":\n            # 使用DB类对象，调用delete方法执行删除语句；使用DB类对象来执行查询的语句，接收查询的结果\n            db_fixture.delete(sql_sentence.get(\"DELETE\"))\n            select_result = db_fixture.delete(sql_sentence.get(\"SELECT\"))\n            request_data[update_key] = select_result\n    \n        # 使用RequestMethod对象发送请求\n        response = request_fixture.request_all(req_method=request_method, req_url=request_url, req_mime=request_mime,\n                                               case_data=request_data)\n        allure.dynamic.description(f\"actual_data:{response.json()}\")\n        # 断言\n        try:\n            # 获取期望数据的key，期望数据的key对应的值是否和服务器返回的数据key对应的值相等，如果相等断言成功，否则失败\n            # assert response.json().get('msg') == request_expect['msg']\n            # and response.json().get('code') == request_expect['code']\n    \n            for key in request_expect.keys():\n                assert response.json().get(key) == request_expect[key]\n    \n        except AssertionError:\n            logging.error(case_number + \"断言失败，用例数据为：\" + str(request_data) + \"期望数据为：\" + str(\n                request_expect) + \"服务器返回的期望数据：\" + response.text)\n>           raise AssertionError(\"断言失败\")\nE           AssertionError: 断言失败\n\ntest_case\\test_ryvue.py:72: AssertionError"}, "description": "actual_data:{'msg': \"修改用户'test'失败，登录账号已存在\", 'code': 500}", "attachments": [{"name": "log", "source": "1420bcc3-f0dd-4873-a9fb-6e56f086874e-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case_number", "value": "'userManagement_127'"}, {"name": "module_name", "value": "'系统管理'"}, {"name": "api_name", "value": "'用户管理'"}, {"name": "case_title", "value": "'验证【用户管理】修改用户，email特殊字符，其他数据正常，修改失败'"}, {"name": "case_level", "value": "'中'"}, {"name": "request_url", "value": "'http://192.168.109.134:81/prod-api/system/user'"}, {"name": "request_method", "value": "'PUT'"}, {"name": "request_mime", "value": "'application/json'"}, {"name": "request_data", "value": "{'userId': 4, 'userName': 'test', 'nickName': 'test', 'email': 'a#$%^&*@b.c'}"}, {"name": "request_expect", "value": "{'msg': '邮箱格式不正确', 'code': 500}"}, {"name": "sql_type", "value": "'SELECT'"}, {"name": "sql_sentence", "value": "'SELECT user_id FROM sys_user WHERE user_name = 'test';'"}, {"name": "update_key", "value": "'user_id'"}], "start": 1711276141035, "stop": 1711276141043, "uuid": "1e3ae41c-c78a-4df3-a90b-248e74701a35", "historyId": "5e55851789164f312f9ddea7eb0f8901", "testCaseId": "71cd9252926fc3e5d5ed6b518138477a", "fullName": "test_case.test_ryvue.TestRyvue#test_ryvue", "labels": [{"name": "feature", "value": "系统管理"}, {"name": "story", "value": "用户管理"}, {"name": "severity", "value": "中"}, {"name": "epic", "value": "若依接口自动化测试"}, {"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "test_ryvue"}, {"name": "subSuite", "value": "TestRyvue"}, {"name": "host", "value": "DESKTOP-P49BVBS"}, {"name": "thread", "value": "3236-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_ryvue"}]}